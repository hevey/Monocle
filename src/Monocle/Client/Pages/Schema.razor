@using Monocle.Shared.Models

<div class="modal @_modalDisplay" @onclick="CloseModal">
 
    <!-- Modal content -->
    <div class="modal-content" @onclick:stopPropagation="true">
        <span class="close" @onclick="CloseModal">&times;</span>
        <EditForm Model="@_newField" OnSubmit="SaveField">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <table class="table">
                <thead>
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Field Type</th>
                    <th scope="col">Required?</th>
                    <th scope="col"></th>
                </tr>
                </thead>
                <tbody>
                @foreach (var field in _fields)
                {
                    <tr scope="row">
                        <td>@field.Name</td>
                        <td>@field.FieldType</td>
                        <td>@field.Required</td>
                        <td><span class="close" @onclick="() => DeleteField(field.Id)">&times;</span></td>
                    </tr>
                }
                @if (_displayAddField)
                {
                    <tr scope="row">
                        <td>
                            <InputText id="name" @bind-Value="_newField.Name" class="form-control"/>
                        </td>
                        <td>
                            <div class="form-group">
                                <InputSelect @bind-Value="_newField.FieldType" class="form-control">
                                    @foreach (var value in Enum.GetValues(typeof(FieldType)))
                                    {
                                        <option>@value</option>
                                    }
                                </InputSelect>
                            </div>
                        </td>
                        <td>
                            <div class="form-check">
                                <InputCheckbox id="required" @bind-Value="_newField.Required" DisplayName="Required" class="form-check-input"/>
                            </div>
                        </td>
                    </tr>
                    <tr scope="row">
                        <td>
                            <button type="submit" class="btn btn-primary">Save</button>
                            <button class="btn btn-secondary" @onclick="CancelField">Cancel</button>
                        </td>
                    </tr>
                }
                else
                {
                    <tr scope="row">
                        <td>
                            <button class="btn btn-primary" @onclick="AddField">
                                Add Field
                            </button>
                        </td>
                    </tr>
                }
                
                </tbody>
            </table>
        </EditForm>
    </div>
 
</div>

@code {

    private bool _open;
    private bool _displayAddField;
    
    private string _modalDisplay = string.Empty;
    private List<Field> _fields = new();
    private Random _random = new();
    private int _counter = 0;
    private Field _newField = new();

    [Parameter]
    public bool Open
    {
        get => _open;
        set
        {
            _open = value;
            DisplayModal();
        }
    }

    [Parameter]
    public EventCallback<bool> OpenChanged { get; set; }

    private void DisplayModal()
    {
        _modalDisplay = _open ? "open" : string.Empty;
    }

    private void CloseModal()
    {
        Open = false;
    }

    private void AddField()
    {
        _displayAddField = true;
    }

    private void DeleteField(int id)
    {
        var field = _fields.Single(f => f.Id == id);
        _fields.Remove(field);
    }

    private void SaveField()
    {
        _displayAddField = false;
        _newField.Id = _counter;
        _fields.Add(_newField);
        _newField = new Field();
        _counter++;
    }

    private void CancelField()
    {
        _displayAddField = false;
        _newField = new Field();
    }

}
     